# A multi-stage template which builds, tests and pushed all presidio assets.
# The following stages make up the pipelines:
# * Pull Request Section - Runs only during PR validation. does not require any service principals
#   * Security-Analysis - Detect security vulnerabilities in code.
#   * PR - Runs Makefile locally to validate all services build and unit tests.
#          Do not change the implementation of this stage without changing the steps in docs/development.md
# * CI Section - Runs on CI (to master or feature branch) and can be run manually.
#   * Setup - validates, using git diff, if deps containers should be rebuilt.
#   * Python - Builds tests and pushes python service. if deps build is required the base container is rebuilt
#            and later stages will use the specific deps version number for building the presidio services.
#   * Golang - Builds tests and pushes, in parallel, golang service. if deps build is required the base container is rebuilt
#            and later stages will use the specific deps version number for building the presidio services.
#   * Test-Functional - Runs local functional tests using the containers built in the previous stage.
#   * Publish Artifacts - Pulls, tags and pushes the containers which were built and tested in the previous stages,
#                       according to the current branch (master builds "latest" label, branches build with branch-name
#                       label)
#
# * parameters:
#     registry_service_principal: service connection to docker registry
#     registry_name: full name of container registry (i.e. presidio.azurecr.io)
#     internal_pypi_feed_name: name of internal pypi feed used to push the wheel during CI
#     internal_pypi_extra_index_url: url of internal pypi feed used to push the wheel during CI
#     external_pypi_service_conection: service connetion to external pypi feed (pypi.org)
#     external_pypi_feed_name: name of external pypi feed
parameters:
  registry_service_principal:
  registry_name:
  internal_pypi_feed_name:
  internal_pypi_extra_index_url:
  external_pypi_service_conection:
  external_pypi_feed_name:

stages:

  # Pull Request Section
  # The following section is used during git PR Validation
  # and is run locally on a single build agent. it runs security analysis on
  # the code and the makefile commands to build, unit test and run local functional tests
  # on a docker network. it requires no service principals or logins to run.
  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:

    - stage: SecurityAnalysis
      displayName: Security Analysis
      # condition: eq(variables['Build.Reason'], 'PullRequest')
      dependsOn: []
      jobs:

      - job: RunAnalysis
        displayName: Run Analysis
        pool:
          # CredScan only runs on Windows
          vmImage: 'windows-latest'
        steps:
        - task: CredScan@2
          displayName: 'Find credentials in source code'
          inputs:
            toolMajorVersion: 'V2'
        - task: SdtReport@1
          displayName: 'Security analysis report'
          inputs:
            AllTools: false
            APIScan: false
            BinSkim: false
            CodesignValidation: false
            CredScan: true
            FortifySCA: false
            FxCop: false
            ModernCop: false
            MSRD: false
            PoliCheck: false
            RoslynAnalyzers: false
            SDLNativeRules: false
            Semmle: false
            TSLint: false
            ToolLogsNotFoundAction: 'Standard'
        - task: PublishSecurityAnalysisLogs@2
          displayName: 'Publish security analysis logs'
          inputs:
            ArtifactName: 'CodeAnalysisLogs'
            ArtifactType: 'Container'
            AllTools: false
            AntiMalware: false
            APIScan: false
            BinSkim: false
            CodesignValidation: false
            CredScan: true
            FortifySCA: false
            FxCop: false
            ModernCop: false
            MSRD: false
            PoliCheck: false
            RoslynAnalyzers: false
            SDLNativeRules: false
            Semmle: false
            TSLint: false
            WebScout: false
            ToolLogsNotFoundAction: 'Standard'
        - task: PostAnalysis@1
          displayName: 'Post security analysis'
          inputs:
            AllTools: false
            APIScan: false
            BinSkim: false
            CodesignValidation: false
            CredScan: true
            FortifySCA: false
            FxCop: false
            ModernCop: false
            PoliCheck: false
            RoslynAnalyzers: false
            SDLNativeRules: false
            Semmle: false
            TSLint: false
            VstsConsole: false
            ToolLogsNotFoundAction: 'Standard'
        - task: ComponentGovernanceComponentDetection@0
          inputs:
            scanType: 'Register'
            verbosity: 'Verbose'
            alertWarningLevel: 'Medium'
            failOnAlert: true

    - stage: PR
      displayName: Pull Request Validation
      dependsOn: []
      pool:
        vmImage: 'ubuntu-latest'
      jobs:
      - job: BuildTest
        displayName: Build and Test
        steps:
          # - template: ./free-agent-disk.yaml
          - task: UsePythonVersion@0
            displayName: 'Use Python $(PYTHON.VERSION)'
            inputs:
              versionSpec: '$(PYTHON.VERSION)'
          - template: ./golang-environment.yaml
          - task: Bash@3
            displayName: 'Prepare python environment'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                df -h
                sudo apt-get update
                sudo apt-get install python3-setuptools
                python -m pip install --upgrade pip
                python -m pip install pipenv
                python -m pip install pytest
                pipenv --python 3
          - task: Bash@3
            displayName: 'Install python dependencies'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                df -h
                # install dev Pipfile libraries
                cd presidio-analyzer

                # install re2 dependency
                re2_version="2018-12-01"
                wget -O re2.tar.gz https://github.com/google/re2/archive/${re2_version}.tar.gz
                mkdir re2
                tar --extract --file "re2.tar.gz" --directory "re2" --strip-components 1
                cd re2 && sudo make install

                # sync current env python deps
                pipenv sync --dev --sequential
                # install Azure pipelines test publish, regex
                pipenv install --dev --skip-lock regex pytest-azurepipelines
                # install spacy model
                pipenv run python -m spacy download en_core_web_lg
          - task: Bash@3
            displayName: 'Install golang pre requisites'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                # Only dep v 0.5.0 works.
                # download specific version
                DEP_VERSION="0.5.0"
                curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o $GOPATH/bin/dep
                chmod +x $GOPATH/bin/dep
                dep ensure

                # install dependency libraries
                sudo apt-get update
                sudo apt-get install libleptonica-dev tesseract-ocr libtesseract-dev

          # Do not change the implementation of this stage without changing the steps in docs/development.md
          - task: Bash@3
            displayName: 'Presidio Makefile - Build lint'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                # run make file commands
                df -h
                make build
                df -h
            env:
              PRESIDIO_DEPS_LABEL: pr
              DOCKER_REGISTRY: presidio
          # Do not change the implementation of this stage without changing the steps in docs/development.md
          - task: Bash@3
            displayName: 'Presidio Makefile - Unit tests'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                # run make file commands
                df -h
                make test DOCKER_REGISTRY=$DOCKER_REGISTRY PRESIDIO_LABEL=$PRESIDIO_DEPS_LABEL
                df -h
            env:
              PRESIDIO_DEPS_LABEL: pr
              DOCKER_REGISTRY: presidio

      - job: ContainerBuildTest
        displayName: Build Containers and Integration Test
        dependsOn: []
        steps:
          # - template: ./free-agent-disk.yaml
          - task: UsePythonVersion@0
            displayName: 'Use Python $(PYTHON.VERSION)'
            inputs:
              versionSpec: '$(PYTHON.VERSION)'
          - template: ./golang-environment.yaml
          - task: Bash@3
            displayName: 'Install golang pre requisites'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                # Only dep v 0.5.0 works.
                # download specific version
                DEP_VERSION="0.5.0"
                curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o $GOPATH/bin/dep
                chmod +x $GOPATH/bin/dep
                dep ensure

          # Do not change the implementation of this stage without changing the steps in docs/development.md
          - task: Bash@3
            displayName: 'Presidio Makefile - Container build'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                df -h
                make docker-build-deps DOCKER_REGISTRY=$DOCKER_REGISTRY PRESIDIO_DEPS_LABEL=$PRESIDIO_DEPS_LABEL
                df -h
            env:
              PRESIDIO_DEPS_LABEL: pr
              DOCKER_REGISTRY: presidio

          # Do not change the implementation of this stage without changing the steps in docs/development.md
          - task: Bash@3
            displayName: 'Presidio Makefile - Functional tests'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(MODULEPATH)'
              script: |
                set -eux  # fail on error

                df -h
                make test-functional DOCKER_REGISTRY=$DOCKER_REGISTRY PRESIDIO_LABEL=$PRESIDIO_DEPS_LABEL
                df -h
            env:
              PRESIDIO_DEPS_LABEL: pr
              DOCKER_REGISTRY: presidio

  # CI Section
  # The following section is used during git merge or manual runs.
  # It runs on parallel builds and full tests of presidio services
  # and publishes artifacts to target and with labels that depend on the
  # built branch.
  - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    # Python Stage
    - stage: PythonStage
      displayName: Build Python
      dependsOn: []
      pool:
        vmImage: 'ubuntu-latest'
      jobs:
        - job: GetDepsJob
          displayName: Get Deps State
          steps:
          - template: ./set-base-container-build.yaml
        - job: PythonDepsBuild
          displayName: Build Python Deps Container
          timeoutInMinutes: 30
          dependsOn: GetDepsJob
          variables:
            DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
            BUILD_DEPS: $[ dependencies.GetDepsJob.outputs['setEnv.BUILD_DEPS'] ]
          steps:
            - task: Docker@2
              displayName: 'Build and Push Python dependencies'
              condition: eq(variables['BUILD_DEPS'], 'true')
              inputs:
                containerRegistry: $(REGISTRY) # input registry name
                repository: 'presidio-python-deps'
                Dockerfile: Dockerfile.python.deps
                tags: |
                  $(Build.BuildId)
                  s
        - job: BuildPython
          displayName: Build Analyzer Service
          timeoutInMinutes: 60
          dependsOn:
          - PythonDepsBuild
          - GetDepsJob
          variables:
            DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
            ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
              PYTHON_BUILD_TAG: '$(Build.BuildId).rc'
            ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
              PYTHON_BUILD_TAG: '$(Build.BuildId).dev'
          steps:
          - template: ./build-python-template.yaml
            parameters:
              folder_name: presidio-analyzer
              package_name: presidio_analyzer
              artifact_feed: ${{parameters.internal_pypi_feed_name}}
              registry_service_connection: ${{parameters.registry_service_principal}}
              registry_name: ${{parameters.registry_name}}
              registry_service_principal: ${{parameters.registry_service_principal}}
              presidio_label: $(Build.BuildID)
              deps_label: $(DEPS_LABEL)
          # To pass the wheel to later stages we write it to a file
          - task: Bash@3
            displayName: Copy wheel Artifacts
            inputs:
              targetType: 'inline'
              script: |
                set -eux  # fail on error

                mv $(System.DefaultWorkingDirectory)/presidio-analyzer/dist $(Pipeline.Workspace)
          # Publish the folder as pipeline artifact
          - publish: $(Pipeline.Workspace)/dist
            displayName: Publish wheel Artifacts
            artifact: dist

    # Golang Stage
    - stage: GolangStage
      displayName: Build Golang
      dependsOn: []
      pool:
        vmImage: 'ubuntu-latest'
      jobs:

        - job: GetDepsJob
          displayName: Get Deps State
          steps:
          - template: ./set-base-container-build.yaml
        - job: GolangDepsBuild
          displayName: Build Golang Deps Container
          timeoutInMinutes: 30
          dependsOn: GetDepsJob
          variables:
            DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
            BUILD_DEPS: $[ dependencies.GetDepsJob.outputs['setEnv.BUILD_DEPS'] ]
          steps:
            - task: Docker@2
              displayName: 'Build and Push Golang dependencies'
              condition: eq(variables['BUILD_DEPS'], 'true')
              inputs:
                containerRegistry: $(REGISTRY) # input registry name
                repository: presidio-golang-deps
                Dockerfile: Dockerfile.golang.deps
                tags: |
                    $(Build.BuildId)

        - job: GolangBase
          displayName: Build Golang Base Container
          timeoutInMinutes: 30
          dependsOn:
          - GolangDepsBuild
          - GetDepsJob
          variables:
            DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
            ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
                BUILD_LABEL: 'latest'
            ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
                BUILD_LABEL: '$(Build.SourceBranchName)'
          steps:
            - template: ./build-golang-template.yaml
              parameters:
                registry_service_connection: ${{parameters.registry_service_principal}}
                registry_name: ${{parameters.registry_name}}
                make_command_to_run: docker-build-golang-base
                image_name: presidio-golang-base
                presidio_label: $(Build.BuildID)
                presidio_branch_label: $(BUILD_LABEL)
                deps_label: $(DEPS_LABEL)

        - job:  GolangService
          displayName: Build Golang Service Containers
          timeoutInMinutes: 15
          dependsOn:
          - GetDepsJob
          - Golangbase
          variables:
            DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
            ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
                BUILD_LABEL: 'latest'
            ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
                BUILD_LABEL: '$(Build.SourceBranchName)'
          strategy:
            maxParallel: 10
            matrix:
              ANONYMIZER:
                  SERVICE_NAME: presidio-anonymizer
              OCR:
                  SERVICE_NAME: presidio-ocr
              ANONYMIZER_IMAGE:
                  SERVICE_NAME: presidio-anonymizer-image
              API:
                  SERVICE_NAME: presidio-api
              SCHDULER:
                  SERVICE_NAME: presidio-scheduler
              DATA_SINK:
                  SERVICE_NAME: presidio-datasink
              COLLECTOR:
                  SERVICE_NAME: presidio-collector
              RECOGNIZER_STORE:
                  SERVICE_NAME: presidio-recognizers-store
              TESTER:
                  SERVICE_NAME: presidio-tester
              FUNCTIONAL_TESTS:
                  SERVICE_NAME: functional-tests
          steps:
          - template: ./Build-golang-template.yaml
            parameters:
              registry_service_connection: ${{parameters.registry_service_principal}}
              registry_name: ${{parameters.registry_name}}
              image_name: $(SERVICE_NAME)
              make_command_to_run: docker-build-golang-single
              presidio_label: $(Build.BuildID)
              presidio_branch_label: $(BUILD_LABEL)
              deps_label: $(DEPS_LABEL)

    # Integration tests
    - stage: TestFunctional
      displayName: Run Functional Tests
      dependsOn:
      - PythonStage
      - GolangStage
      pool:
        vmImage: 'ubuntu-latest'
      jobs:

        - job: FunctionalTests
          displayName: Presidio Functional Tests
          steps:
          - task: Docker@2
            displayName: Docker login
            inputs:
              containerRegistry: ${{parameters.registry_service_principal}}
              command: 'login'
          - task: Bash@3
            displayName: 'Run functional tests'
            inputs:
              targetType: 'inline'
              script: |
                set -eux  # fail on error

                make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) TEST_IN_CONTAINER=true test-functional-no-build
          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testRunner: JUnit
              testResultsFiles: $(System.DefaultWorkingDirectory)/test-results/functional-report.xml

    # Publish artifacts
    - stage: PublishArtifacts
      displayName: Publish Build Artifacts
      dependsOn:
      - TestFunctional
      pool:
        vmImage: 'ubuntu-latest'
      variables:
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
              BUILD_LABEL: 'latest'
          ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
              BUILD_LABEL: '$(Build.SourceBranchName)'
      jobs:

        - job: GetDepsJob
          displayName: Get Deps State
          steps:
          - template: ./set-base-container-build.yaml
        - job: PublishPypi
          displayName: Publish Analyzer to Pypi
          variables:
            ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
              PYTHON_BUILD_TAG: '$(Build.BuildId).rc'
            ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
              PYTHON_BUILD_TAG: '$(Build.BuildId).dev'
          steps:
          # download wheel from temp artifact
          - download: current
            displayName: Download wheel artifacts
            artifact: dist
          - task: Bash@3
            displayName: Copy wheel
            inputs:
              targetType: 'inline'
              script: |
                set -eux  # fail on error

                mv $(Pipeline.Workspace)/dist/ $(System.DefaultWorkingDirectory)/
          # Publish Wheel to Pypi
          - task: UsePythonVersion@0
            displayName: 'Use Python $(PYTHON.VERSION)'
            inputs:
              versionSpec: '$(PYTHON.VERSION)'
          - template: ./publish-python-twine.yaml
            parameters:
              feed_display_name: 'Pypi'
              feed_name: ${{ parameters.external_pypi_feed_name }}
              folder_name: 'dist'
              artifact_feed: ${{ parameters.external_pypi_service_conection }}
              artifact_is_ado: 'false'

        - job: PublishContainers
          displayName: Publish Containers
          dependsOn: GetDepsJob
          variables:
            DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
            BUILD_DEPS: $[ dependencies.GetDepsJob.outputs['setEnv.BUILD_DEPS'] ]
          steps:
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              containerRegistry: ${{ parameters.registry_service_principal }}
              command: 'login'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Helm Artifact'
            inputs:
              targetPath: charts
              ArtifactName: dropchart
          - task: Bash@3
            displayName: 'Tag golang base image'
            inputs:
              targetType: 'inline'
              script: |
                set -eux  # fail on error

                docker pull $REGISTRY_NAME/presidio-golang-base:$(Build.BuildID)
                docker tag \
                  $REGISTRY_NAME/presidio-golang-base:$(Build.BuildID) \
                  $REGISTRY_NAME/presidio-golang-base:$(BUILD_LABEL)
                docker push $REGISTRY_NAME/presidio-golang-base:$(BUILD_LABEL)
            env:
              REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
          - task: Bash@3
            displayName: 'Push Docker Images - Master Branch'    # push with latest label - master branch
            condition: eq(variables['Build.SourceBranchName'], 'master')
            inputs:
              targetType: 'inline'
              script: |
                set -eux  # fail on error

                make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) docker-push-latest-deps
                make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildId) RELEASE_VERSION=$(RELEASE_NAME) docker-push-release
            env:
              REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
          - task: Bash@3
            displayName: 'Push Docker Images - Feature Branch'    # push with branch-name label - feature branch
            condition: ne(variables['Build.SourceBranchName'], 'master')
            inputs:
              targetType: 'inline'
              script: |
                set -eux  # fail on error

                make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) PRESIDIO_BRANCH_LABEL=$(BUILD_LABEL) docker-push-latest-branch-deps
                make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) PRESIDIO_BRANCH_LABEL=$(BUILD_LABEL) docker-push-latest-branch
            env:
              REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
