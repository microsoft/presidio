# This template uses Twine https://pypi.org/project/twine/ to upload
# python package to an aritfact feed. this can be Azure Artifacts
# or Pypi depending on parameter artifact_is_ado.
# if artifact_is_ado is true, artifact_feed is the feed URL.
# if artifact_is_ado is false, artifact_feed is a python service connection name.
parameters:
  feed_display_name: ''
  feed_name: ''
  folder_name: '' 
  artifact_feed: ''
  artifact_is_ado: 'true'
steps:
    - task: Bash@3
      displayName: 'Install twine'
      inputs:
        targetType: 'inline'
        script: |
            pip install wheel
            pip install twine
        workingDirectory: ${{ parameters.folder_name }}
    - ${{ if eq(parameters.artifact_is_ado, 'true') }}:
      - task: TwineAuthenticate@1
        displayName: 'Authenticate with Azure Artifacts'
        inputs:
          artifactFeed: ${{ parameters.artifact_feed }}
      - task: Bash@3
        displayName: 'Upload Wheel to ${{ parameters.feed_name}}'
        inputs:
          targetType: 'inline'
          script: |
              twine upload -r $FEED_NAME --config-file $(PYPIRC_PATH) --skip-existing ./*
          workingDirectory: ${{ parameters.folder_name }}
        env:
          FEED_NAME: ${{ parameters.artifact_feed }}
    - ${{ if ne(parameters.artifact_is_ado, 'true') }}:
      - task: TwineAuthenticate@1
        displayName: 'Authenticate with Pypi'
        inputs:
          pythonUploadServiceConnection: ${{ parameters.artifact_feed }}
      - task: Bash@3
        displayName: 'Upload Wheel to ${{ parameters.feed_display_name}}'
        inputs:
          targetType: 'inline'
          script: |
              twine upload -r $FEED_NAME --verbose --config-file $(PYPIRC_PATH) --skip-existing ./*
          workingDirectory: ${{ parameters.folder_name }}
        env:
          FEED_NAME: ${{ parameters.feed_name }}
    