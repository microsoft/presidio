parameters:
  registry_parameter: '' # container registry service connection name 
  registry_name_parameter: '' # container registry URI
  deps_label_parameter: 'DEPENDENCY_DEFAULT' # presidio deps label: if not provided will use the default
steps:
- bash: |
    if [[ $DEPS_LABEL_TAG == *"DEPENDENCY_DEFAULT"*  ]]; then
      echo '##vso[task.setvariable variable=DEPS_LABEL]$(DEFAULT_DEPS_LABEL)' 
      echo 'deps label is empty, setting to default'
    else
      echo '##vso[task.setvariable variable=DEPS_LABEL]${{ parameters.deps_label_parameter }}' 
      echo 'deps label is not empty:' $DEPS_LABEL_TAG
    fi
  displayName: 'Setup deps label if empty'
  env:
    DEPS_LABEL_TAG: ${{ parameters.deps_label_parameter }}
- task: Docker@2
  inputs:
    containerRegistry: ${{ parameters.registry_parameter }}
    command: 'login'
- bash: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(MODULEPATH)'
    shopt -s extglob
    mv !(gopath) '$(MODULEPATH)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Setup Go Env'
- bash: |
    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    dep ensure      
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$DEPS_LABEL test-functional
  env:
    REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
  workingDirectory: '$(MODULEPATH)'
  displayName: 'Build & Test '

### pushing and publishing on non PR only
- task: CopyFiles@2
  displayName: 'Copy Chart to Artifact Staging Directory'
  condition: ne(variables['Build.Reason'], 'PullRequest')
  inputs:
    Contents: '**/charts/**'
    TargetFolder: charts
    CleanTargetFolder: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: dropchart'
  condition: ne(variables['Build.Reason'], 'PullRequest')
  inputs:
    PathtoPublish: charts
    ArtifactName: dropchart  

- bash: | 
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) docker-push
  env:
    REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
  displayName: 'Push Docker Images - BuildId label'    # push with build-id label - all branches  
  condition: ne(variables['Build.Reason'], 'PullRequest')
  workingDirectory: '$(MODULEPATH)'
- bash: |
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) docker-push-latest-deps
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildId) RELEASE_VERSION='$(RELEASE_NAME)' docker-push-release                    
  env:
    REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
  displayName: 'Push Docker Images - Master Branch'    # push with latest label - master branch 
  condition: and( ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master'))
  workingDirectory: '$(MODULEPATH)'
- bash: | 
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) docker-push-latest-dev-deps
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildId) docker-push-latest-dev      
  env:
    REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
  displayName: 'Push Docker Images - Development Branch'    # push with latest-dev label - development branch
  condition:  and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'development'))
  workingDirectory: '$(MODULEPATH)'
- bash: | 
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) PRESIDIO_BRANCH_LABEL=$(Build.SourceBranchName) docker-push-latest-branch-deps
    make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) PRESIDIO_BRANCH_LABEL=$(Build.SourceBranchName) docker-push-latest-branch
  env:
    REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
  displayName: 'Push Docker Images - Feature Branch'    # push with branch-name label - feature branch
  condition: and(ne(variables['Build.Reason'], 'PullRequest'), and(ne(variables['Build.SourceBranchName'], 'development'), ne(variables['Build.SourceBranchName'], 'master')))
  workingDirectory: '$(MODULEPATH)'