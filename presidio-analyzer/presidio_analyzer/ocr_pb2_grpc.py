# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ocr_pb2 as ocr__pb2


class OcrServiceStub(object):
  """The Ocr Service is a service performing OCR on images
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Apply = channel.unary_unary(
        '/types.OcrService/Apply',
        request_serializer=ocr__pb2.OcrRequest.SerializeToString,
        response_deserializer=ocr__pb2.OcrResponse.FromString,
        )


class OcrServiceServicer(object):
  """The Ocr Service is a service performing OCR on images
  """

  def Apply(self, request, context):
    """Apply method will execute on the given request and return the anonymize response with the sensitive text anonymized
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OcrServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Apply': grpc.unary_unary_rpc_method_handler(
          servicer.Apply,
          request_deserializer=ocr__pb2.OcrRequest.FromString,
          response_serializer=ocr__pb2.OcrResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'types.OcrService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
