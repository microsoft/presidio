trigger:
  branches:
    include:
    - '*'

pr:
  branches:
    include:
      - V2

jobs:
    #- job: validate
    #  displayName: 'Validate PR pre-requisites'
    #  steps:
    #    - template: .pipelines/templates/validate-version.yml
    #      parameters:
    #        UPSTREAM_BRANCH: $(System.PullRequest.TargetBranch)

    - job: inclusivelint
      displayName: 'Inclusive linting validation'
      steps:
        - task: Bash@3
          displayName: 'inclusive lint'
          inputs:
            targetType: 'inline'
            script: |
              npm install inclusivelint
              npx inclusivelint -r -p .
    
    - job: SecurityAnalysis
      displayName: Security Analysis
      pool:
          # CredScan only runs on Windows
          vmImage: 'windows-latest'
      steps:
        - template: .pipelines/templates/security-analysis.yml
       
    - job: 'TestAnalyzer'
      displayName: Test Analyzer
      dependsOn:
      #- 'validate'
      - 'inclusivelint'
      - 'SecurityAnalysis'
      pool:
        vmImage: 'ubuntu-16.04'
      strategy:
        matrix:
          #Python36: disabled bug2677
          #  python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - task: Bash@3
          displayName: 'Setup pipenv'
          inputs:
            targetType: 'inline'
            script: |
              set -eux  # fail on error
              python -m pip install --upgrade pip
              python -m pip install pipenv
              pipenv --python 3

        - task: Bash@3
          displayName: 'Install deps'
          inputs:
            targetType: 'inline'
            workingDirectory: 'presidio-analyzer'
            script: |
              set -eux  # fail on error
              pipenv sync --dev --sequential
              pipenv run python -m spacy download en_core_web_lg
        
        - template: .pipelines/templates/build-python.yml
          parameters:
            SERVICE: 'Analyzer'
            WORKING_FOLDER: 'presidio-analyzer'

    - job: 'TestAnonymizer'
      displayName: Test Anonymizer
      dependsOn:
      #- 'validate'
      - 'inclusivelint'
      - 'SecurityAnalysis'
      pool:
        vmImage: 'ubuntu-16.04'
      strategy:
        matrix:
          #Python36: disabled bug2677
          #  python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - task: Bash@3
          displayName: 'Setup pipenv'
          inputs:
            targetType: 'inline'
            script: |
              set -eux  # fail on error
              python -m pip install --upgrade pip
              python -m pip install pipenv
              pipenv --python 3

        - task: Bash@3
          displayName: 'Install deps: Anonymizer'
          inputs:
            targetType: 'inline'
            workingDirectory: 'presidio-anonymizer'
            script: |
              set -eux  # fail on error
              pipenv sync --dev --sequential

        - template: .pipelines/templates/build-python.yml
          parameters:
            SERVICE: 'Anonymizer'
            WORKING_FOLDER: 'presidio-anonymizer'
    - job: BuildContainers
      displayName: Build and Push Containers
      dependsOn:
        - 'inclusivelint'
        - 'SecurityAnalysis'
      pool:
        vmImage: 'ubuntu-16.04'
      variables:
        REGISTRY_NAME: '$(ACR_REGISTRY_NAME)'  
        TAG: '$(Build.BuildId)'  
      steps:
        - task: DockerCompose@0
          displayName: Build Presidio Images
          condition: eq(variables['Build.Reason'], 'IndividualCI')
          inputs:
              action: Build services
              dockerComposeFile: docker-compose.yml  
        - task: DockerCompose@0
          displayName: Push Presidio Images to ACR
          condition: eq(variables['Build.Reason'], 'IndividualCI')
          inputs:
              action: Push services
              dockerComposeFile: docker-compose.yml  
              azureSubscriptionEndpoint: $(ACR_AZURE_SUBSCRIPTION)
              azureContainerRegistry: $(ACR_REGISTRY_NAME)

    - job: FunctionalTests
      displayName: Functional Tests
      dependsOn:
        - 'BuildContainers'
        - 'inclusivelint'
        - 'SecurityAnalysis'
      pool:
        vmImage: 'ubuntu-16.04'
      ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
        REGISTRY_NAME: '$(ACR_REGISTRY_NAME)'  
        TAG: '$(Build.BuildId)'  
      steps:
        - task: DockerCompose@0
          condition: ne(variables['Build.Reason'], 'IndividualCI')
          displayName: Build Presidio Images
          inputs:
              action: Build services
              dockerComposeFile: docker-compose.yml
        - template: .pipelines/templates/functional-tests.yml
