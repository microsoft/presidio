name: Release

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
      publish_pypi:
        description: 'Publish to PyPI'
        required: true
        default: true
        type: boolean
      publish_containers:
        description: 'Publish containers to ACR'
        required: true
        default: true
        type: boolean

permissions: read-all

env:
  REGISTRY_NAME: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_PREFIX: "public/"

jobs:
  get-version:
    name: Get Version Numbers
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      image-version: ${{ steps.set-image-version.outputs.image-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract main version
        id: set-version
        run: |
          set -eu
          ver=$(grep -m 1 version presidio-analyzer/pyproject.toml | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "Main version: $ver"

      - name: Extract image-redactor version
        id: set-image-version
        run: |
          set -eu
          imageVer=$(grep -m 1 version presidio-image-redactor/pyproject.toml | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)
          echo "image-version=$imageVer" >> $GITHUB_OUTPUT
          echo "Image-redactor version: $imageVer"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ inputs.create_release }}
    permissions:
      contents: write
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          release_name: Release ${{ needs.get-version.outputs.version }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ needs.get-version.outputs.version }}" \
            --title "Release ${{ needs.get-version.outputs.version }}" \
            --notes "" \
            --verify-tag \
            --latest

  publish-to-pypi:
    name: Publish ${{ matrix.package }} to PyPI
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ inputs.publish_pypi }}
    strategy:
      matrix:
        package:
          - name: "Analyzer"
            path: "presidio-analyzer"
          - name: "Anonymizer"
            path: "presidio-anonymizer"
          - name: "Image-Redactor"
            path: "presidio-image-redactor"
          - name: "Structured"
            path: "presidio-structured"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build wheel package
        working-directory: ${{ matrix.package.path }}
        run: |
          python -m build --wheel

      - name: Publish to PyPI
        working-directory: ${{ matrix.package.path }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload --verbose --skip-existing dist/*

  build-and-push-containers:
    name: Build and Push Containers
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ inputs.publish_containers }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all containers
        run: |
          # Build all images without pushing (no TAG specified, uses 'latest' by default)
          docker compose build

      - name: Tag and push text services with their versions
        run: |
          # Tag and push analyzer and anonymizer with main version
          for service in presidio-analyzer presidio-anonymizer; do
            # Tag with version
            docker tag ${service}:latest ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}${service}:${{ needs.get-version.outputs.version }}
            docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}${service}:${{ needs.get-version.outputs.version }}
            
            # Tag and push as latest
            docker tag ${service}:latest ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}${service}:latest
            docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}${service}:latest
          done

      - name: Tag and push image-redactor with its version
        run: |
          # Tag and push image-redactor with its specific version
          docker tag presidio-image-redactor:latest ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}presidio-image-redactor:${{ needs.get-version.outputs.image-version }}
          docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}presidio-image-redactor:${{ needs.get-version.outputs.image-version }}
          
          # Tag and push as latest
          docker tag presidio-image-redactor:latest ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}presidio-image-redactor:latest
          docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_PREFIX }}presidio-image-redactor:latest
