"""AHDS Surrogate operator that uses Azure Health Data Services for surrogate generation."""

import os
from typing import Dict, List
import logging

try:
    from azure.health.deidentification import DeidentificationClient
    from azure.health.deidentification.models import (
        DeidentificationContent,
        SimplePhiEntity,
        TaggedPhiEntities,
        PhiCategory,
        DeidentificationOperationType,
        TextEncodingType,
    )
    from azure.identity import DefaultAzureCredential
except ImportError:
    DeidentificationClient = None
    DeidentificationContent = None
    DefaultAzureCredential = None
    SimplePhiEntity = None
    TaggedPhiEntities = None
    PhiCategory = None
    DeidentificationOperationType = None
    TextEncodingType = None

from presidio_anonymizer.operators import Operator, OperatorType
from presidio_anonymizer.entities import InvalidParamError

logger = logging.getLogger("presidio-anonymizer")


class AHDSSurrogate(Operator):
    """AHDS Surrogate operator that uses Azure Health Data Services SurrogateOnly operation for surrogate generation."""
    
    ENDPOINT = "endpoint"
    ENTITIES = "entities"
    INPUT_LOCALE = "input_locale"
    SURROGATE_LOCALE = "surrogate_locale"
    
    def __init__(self):
        if not DeidentificationClient:
            raise ImportError(
                "Azure Health Data Services SDK is not available. "
                "Please install azure-health-deidentification and azure-identity."
            )
    
    def operate(self, text: str = None, params: Dict = None) -> str:
        """
        Replace PII entities with realistic surrogates using Azure Health Data Services.
        
        This operator uses the AHDS SurrogateOnly operation to generate contextually 
        appropriate replacements for detected PII entities, maintaining text readability
        while protecting sensitive information.
        
        :param text: The full text being processed
        :param params: Parameters including:
            - endpoint: AHDS endpoint (optional, can use AHDS_ENDPOINT env var)
            - entities: List of entities detected by analyzer
            - input_locale: Input locale (default: "en-US")
            - surrogate_locale: Surrogate locale (default: "en-US")
        :return: Text with surrogates generated by AHDS
        """
        if not text:
            return ""
            
        endpoint = params.get(self.ENDPOINT) or os.getenv("AHDS_ENDPOINT")
        if not endpoint:
            raise InvalidParamError(
                "AHDS endpoint is required. Provide via 'endpoint' parameter "
                "or set AHDS_ENDPOINT environment variable."
            )
        
        entities = params.get(self.ENTITIES, [])
        input_locale = params.get(self.INPUT_LOCALE, "en-US")
        surrogate_locale = params.get(self.SURROGATE_LOCALE, "en-US")
        
        # Convert analyzer results to AHDS tagged entities
        tagged_entities = self._convert_to_tagged_entities(entities)
        
        # Create AHDS client with the API version that works with this endpoint
        credential = DefaultAzureCredential()
        client = DeidentificationClient(endpoint, credential, api_version="2024-11-15")
        
        # Create tagged entity collection
        tagged_entity_collection = TaggedPhiEntities(
            encoding=TextEncodingType.CODE_POINT,
            entities=tagged_entities
        )
        
        # Create deidentification content with tagged entities for surrogate generation
        content = DeidentificationContent(
            input_text=text,
            operation_type=DeidentificationOperationType.SURROGATE_ONLY,
            tagged_entities=tagged_entity_collection
        )
        
        try:
            result = client.deidentify_text(content)
            return result.output_text if result.output_text else text
        except Exception as e:
            error_message = str(e)
            
            # Handle specific error types
            if "500" in error_message or "InternalServerError" in error_message:
                logger.error(f"AHDS service returned 500 error - service may be temporarily unavailable: {error_message}")
                
                # For 500 errors, we might want to return the original text rather than failing
                logger.warning("Returning original text due to service error")
                return text
            
            # If it's an API version error, try to extract supported versions
            elif "ApiVersionUnsupported" in error_message or "api-version" in error_message.lower():
                logger.error(f"API Version not supported. Error: {error_message}")
                
                # Try to extract supported versions from the error response
                supported_versions = None
                if hasattr(e, 'response') and e.response and hasattr(e.response, 'headers'):
                    headers = e.response.headers
                    if 'api-supported-versions' in headers:
                        supported_versions = headers['api-supported-versions']
                        logger.info(f"Supported API versions from response: {supported_versions}")
                        
                        # Try the first supported version
                        if supported_versions and ',' in supported_versions:
                            versions_list = [v.strip() for v in supported_versions.split(',')]
                            if versions_list:
                                first_version = versions_list[0]
                                logger.info(f"Attempting to use supported API version: {first_version}")
                                try:
                                    version_client = DeidentificationClient(endpoint, credential, api_version=first_version)
                                    result = version_client.deidentify_text(content)
                                    return result.output_text if result.output_text else text
                                except Exception as version_error:
                                    logger.error(f"Failed with supported version {first_version}: {version_error}")
                
                # Generic fallback - try without explicit version
                logger.info("Attempting to use default API version...")
                try:
                    fallback_client = DeidentificationClient(endpoint, credential)
                    result = fallback_client.deidentify_text(content)
                    return result.output_text if result.output_text else text
                except Exception as fallback_error:
                    logger.error(f"Fallback with default API version also failed: {fallback_error}")
            
            logger.error(f"AHDS SurrogateOnly operation failed: {e}")
            raise InvalidParamError(f"AHDS SurrogateOnly operation failed: {e}")
    
    def _convert_to_tagged_entities(self, entities: List) -> List:
        """Convert analyzer results to AHDS SimplePhiEntity format."""
        tagged_entities = []
        
        for entity in entities:
            # Handle both RecognizerResult objects and dict format
            if hasattr(entity, 'entity_type'):
                # RecognizerResult object
                category_name = entity.entity_type
                start = entity.start
                end = entity.end
                text = entity.text if hasattr(entity, 'text') else ""
            else:
                # Dict format
                category_name = entity.get('entity_type', entity.get('category', ''))
                start = entity.get('start', entity.get('offset', 0))
                end = entity.get('end', start + entity.get('length', 0))
                text = entity.get('text', '')
            
            # Map entity type to PhiCategory
            phi_category = self._map_to_phi_category(category_name)
            
            tagged_entity = SimplePhiEntity(
                category=phi_category,
                offset=start,
                length=end - start
            )
            tagged_entities.append(tagged_entity)
        
        return tagged_entities
    
    def _map_to_phi_category(self, entity_type: str):
        """Map Presidio entity types to AHDS PhiCategory."""
        # For now, map everything to PATIENT category which we know exists
        # This ensures compatibility while we determine which other categories are available
        return PhiCategory.PATIENT
    
    def validate(self, params: Dict = None) -> None:
        """Validate operator parameters."""
        if params is None:
            params = {}
            
        endpoint = params.get(self.ENDPOINT) or os.getenv("AHDS_ENDPOINT")
        if not endpoint:
            raise InvalidParamError(
                "AHDS endpoint is required. Provide via 'endpoint' parameter "
                "or set AHDS_ENDPOINT environment variable."
            )
        
        entities = params.get(self.ENTITIES, [])
        if not isinstance(entities, list):
            raise InvalidParamError("Entities must be a list")
    
    def operator_name(self) -> str:
        """Return operator name."""
        return "surrogate"
    
    def operator_type(self) -> OperatorType:
        """Return operator type."""
        return OperatorType.Anonymize
