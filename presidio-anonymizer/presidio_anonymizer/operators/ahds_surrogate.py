"""AHDS Surrogate operator that uses Azure Health Data Services for surrogate generation."""

import os
from typing import Dict, List
import logging

try:
    from azure.health.deidentification import DeidentificationClient
    from azure.health.deidentification.models import (
        DeidentificationContent,
        OperationType,
        TaggedEntity,
        TaggedEntityCollection,
        DocumentLocation,
    )
    from azure.identity import DefaultAzureCredential
except ImportError:
    DeidentificationClient = None
    DeidentificationContent = None
    OperationType = None
    DefaultAzureCredential = None
    TaggedEntity = None
    TaggedEntityCollection = None
    DocumentLocation = None

from presidio_anonymizer.operators import Operator, OperatorType
from presidio_anonymizer.entities import InvalidParamError

logger = logging.getLogger("presidio-anonymizer")


class AHDSSurrogate(Operator):
    """AHDS Surrogate operator that uses Azure Health Data Services for surrogate generation."""
    
    ENDPOINT = "endpoint"
    ENTITIES = "entities"
    INPUT_LOCALE = "input_locale"
    SURROGATE_LOCALE = "surrogate_locale"
    
    def __init__(self):
        if not DeidentificationClient:
            raise ImportError(
                "Azure Health Data Services SDK is not available. "
                "Please install azure-health-deidentification and azure-identity."
            )
    
    def operate(self, text: str = None, params: Dict = None) -> str:
        """
        Replace PII entities with surrogates using AHDS SurrogateOnly operation.
        
        :param text: The full text being processed
        :param params: Parameters including:
            - endpoint: AHDS endpoint (optional, can use AHDS_ENDPOINT env var)
            - entities: List of entities detected by analyzer
            - input_locale: Input locale (default: "en-US")
            - surrogate_locale: Surrogate locale (default: "en-US")
        :return: Text with surrogates generated by AHDS
        """
        if not text:
            return ""
            
        endpoint = params.get(self.ENDPOINT) or os.getenv("AHDS_ENDPOINT")
        if not endpoint:
            raise InvalidParamError(
                "AHDS endpoint is required. Provide via 'endpoint' parameter "
                "or set AHDS_ENDPOINT environment variable."
            )
        
        entities = params.get(self.ENTITIES, [])
        input_locale = params.get(self.INPUT_LOCALE, "en-US")
        surrogate_locale = params.get(self.SURROGATE_LOCALE, "en-US")
        
        # Convert analyzer results to AHDS tagged entities
        tagged_entities = self._convert_to_tagged_entities(entities)
        
        # Create AHDS client
        credential = DefaultAzureCredential()
        client = DeidentificationClient(endpoint.replace("https://", ""), credential)
        
        # Create tagged entity collection
        tagged_entity_collection = TaggedEntityCollection(
            encoding="Utf16",
            entities=tagged_entities
        )
        
        # Create deidentification content for SurrogateOnly operation
        content = DeidentificationContent(
            input_text=text,
            operation=OperationType.SURROGATE,
            tagged_entities=tagged_entity_collection,
            customizations={
                "inputLocale": input_locale,
                "surrogateLocale": surrogate_locale
            }
        )
        
        try:
            result = client.deidentify(content)
            return result.output_text if result.output_text else text
        except Exception as e:
            logger.error(f"AHDS Surrogate operation failed: {e}")
            raise InvalidParamError(f"AHDS Surrogate operation failed: {e}")
    
    def _convert_to_tagged_entities(self, entities: List) -> List:
        """Convert analyzer results to AHDS TaggedEntity format."""
        tagged_entities = []
        
        for entity in entities:
            # Handle both RecognizerResult objects and dict format
            if hasattr(entity, 'entity_type'):
                # RecognizerResult object
                category = entity.entity_type
                start = entity.start
                end = entity.end
                text = entity.text if hasattr(entity, 'text') else ""
            else:
                # Dict format
                category = entity.get('entity_type', entity.get('category', ''))
                start = entity.get('start', entity.get('offset', 0))
                end = entity.get('end', start + entity.get('length', 0))
                text = entity.get('text', '')
            
            tagged_entity = TaggedEntity(
                category=category,
                offset=DocumentLocation(
                    utf8=start,
                    utf16=start,
                    code_point=start
                ),
                length=DocumentLocation(
                    utf8=end - start,
                    utf16=end - start,
                    code_point=end - start
                ),
                text=text
            )
            tagged_entities.append(tagged_entity)
        
        return tagged_entities
    
    def validate(self, params: Dict = None) -> None:
        """Validate operator parameters."""
        if not params:
            return
            
        endpoint = params.get(self.ENDPOINT) or os.getenv("AHDS_ENDPOINT")
        if not endpoint:
            raise InvalidParamError(
                "AHDS endpoint is required. Provide via 'endpoint' parameter "
                "or set AHDS_ENDPOINT environment variable."
            )
        
        entities = params.get(self.ENTITIES, [])
        if not isinstance(entities, list):
            raise InvalidParamError("Entities must be a list")
    
    def operator_name(self) -> str:
        """Return operator name."""
        return "surrogate"
    
    def operator_type(self) -> OperatorType:
        """Return operator type."""
        return OperatorType.Anonymize
